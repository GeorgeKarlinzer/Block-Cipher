import textwrap

# region Key generator
""" Generacja kluczy wygląda podobnie jak w DESie, ale nie skracam klucz do 48 bitów """
""" Wszystkie tablicy permutacje zostały zmienione w porównaniu z DESem """

PC1 = [87, 126, 78, 12, 181, 86, 3, 248, 242, 166, 177, 66, 93, 106, 4, 192, 84, 200, 178, 123, 159, 113, 69, 140, 6,
       129,
       68, 139, 22, 197, 53, 54, 218, 115, 158, 164, 122, 27, 149, 116, 232, 247, 252, 19, 131, 209, 233, 194, 138, 231,
       18, 136, 190, 198, 124, 153, 249, 144, 239, 167, 215, 74, 191, 137, 150, 119, 28, 82, 245, 58, 236, 195, 117,
       254,
       114, 225, 32, 145, 182, 11, 223, 2, 43, 105, 67, 210, 148, 132, 103, 24, 16, 29, 229, 39, 76, 111, 38, 226, 91,
       98,
       44, 172, 75, 253, 212, 157, 171, 183, 65, 205, 235, 156, 83, 216, 179, 170, 206, 220, 201, 255, 51, 120, 34, 199,
       128, 108, 5, 234, 45, 63, 107, 155, 202, 186, 80, 37, 17, 118, 99, 50, 77, 188, 162, 55, 95, 121, 85, 60, 154,
       238,
       1, 33, 173, 7, 133, 46, 79, 169, 72, 219, 35, 14, 70, 104, 47, 214, 96, 222, 62, 49, 109, 208, 165, 41, 244, 184,
       227, 151, 97, 42, 112, 168, 64, 21, 25, 224, 189, 246, 228, 207, 135, 9, 176, 250, 88, 89, 61, 146, 160, 211,
       125,
       251, 94, 241, 217, 187, 175, 100, 141, 59, 152, 71, 52, 48, 13, 213, 134, 147, 193, 143, 36, 90, 23, 163, 180,
       81,
       15, 92, 57, 185, 26, 240, 256, 221, 130, 20, 203, 30, 8, 40, 204, 73, 101, 102, 127, 243, 56, 196, 174, 142, 110,
       230, 161, 31, 237, 10]
PC2 = [206, 60, 79, 3, 99, 89, 230, 51, 245, 48, 143, 4, 114, 11, 167, 201, 177, 194, 210, 125, 250, 162, 97, 150, 135,
       68, 228, 71, 236, 198, 127, 17, 223, 16, 44, 26, 120, 249, 22, 216, 218, 174, 235, 221, 248, 87, 95, 187, 186,
       185,
       70, 65, 132, 208, 110, 46, 242, 78, 213, 226, 5, 219, 56, 227, 182, 171, 69, 196, 115, 144, 101, 160, 32, 224,
       62,
       77, 134, 33, 158, 2, 82, 6, 18, 58, 209, 200, 220, 1, 96, 64, 225, 232, 98, 165, 76, 246, 111, 94, 251, 83, 121,
       117, 12, 113, 38, 195, 192, 238, 23, 14, 199, 27, 31, 191, 240, 124, 156, 85, 233, 163, 231, 149, 239, 54, 102,
       90,
       133, 109, 126, 19, 93, 145, 170, 131, 52, 190, 13, 178, 255, 36, 50, 103, 169, 28, 155, 119, 75, 42, 107, 66,
       234,
       73, 92, 157, 49, 154, 181, 24, 183, 204, 166, 212, 153, 123, 152, 128, 247, 118, 74, 188, 147, 63, 256, 229, 148,
       137, 136, 100, 237, 7, 41, 108, 168, 84, 179, 138, 175, 164, 88, 29, 203, 37, 140, 15, 161, 10, 217, 106, 205,
       104,
       86, 146, 193, 34, 40, 59, 30, 253, 142, 184, 21, 151, 214, 139, 45, 176, 130, 159, 207, 197, 72, 180, 47, 173,
       39,
       9, 25, 35, 91, 172, 8, 116, 105, 222, 202, 112, 129, 20, 53, 241, 57, 81, 252, 55, 80, 243, 61, 43, 244, 189,
       122,
       67, 141, 254, 211, 215]


def permutate(permutation_table, array):
    new_array = ""
    for index in permutation_table:
        new_array += array[index - 1]
    return new_array


def shift_left(array, shift):
    shifted_array = array[shift:] + array[:shift]
    return shifted_array


round_shifts = [2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2]


def generate_keys(key_256bits):
    key_256bits = permutate(PC1, key_256bits)
    left_key, right_key = key_256bits[:128], key_256bits[128:]
    keys = []

    for shift in round_shifts:
        left_key, right_key = shift_left(left_key, shift), shift_left(right_key, shift)
        keys.append(permutate(PC2, left_key + right_key))

    return keys


# endregion Key generator


# region F_Func

""" Nieliniowa funkcja F, również uległa zmianie """
""" Teraz dzielę 128 bity danych na bloki po 8 bitów, które permutuję za pomocą własnych SBOXów, po czym xoruje z kluczem """

SBOX = [
    [
        [10, 5, 2, 9, 1, 11, 12, 3, 4, 13, 6, 14, 0, 15, 8, 7],
        [8, 15, 13, 6, 9, 3, 11, 12, 1, 14, 10, 5, 2, 0, 7, 4],
        [0, 8, 4, 5, 7, 15, 6, 12, 3, 14, 11, 13, 9, 1, 10, 2],
        [1, 3, 5, 4, 13, 12, 7, 2, 8, 15, 6, 14, 0, 10, 9, 11],
        [2, 14, 4, 11, 15, 12, 6, 1, 5, 0, 10, 3, 9, 7, 13, 8],
        [8, 7, 2, 1, 13, 10, 14, 6, 9, 12, 3, 15, 0, 11, 4, 5],
        [7, 5, 13, 2, 3, 4, 15, 11, 6, 9, 14, 0, 10, 8, 1, 12],
        [8, 10, 4, 9, 7, 2, 0, 12, 14, 13, 11, 5, 1, 15, 3, 6],
        [7, 15, 5, 3, 12, 0, 9, 11, 13, 10, 14, 6, 1, 2, 8, 4],
        [10, 0, 6, 14, 4, 9, 5, 2, 3, 7, 1, 15, 11, 12, 8, 13],
        [14, 3, 11, 6, 8, 2, 10, 15, 5, 9, 1, 4, 0, 13, 7, 12],
        [7, 12, 0, 5, 14, 9, 11, 15, 1, 13, 3, 6, 4, 8, 10, 2],
        [4, 13, 7, 6, 8, 15, 5, 0, 9, 2, 11, 1, 3, 10, 12, 14],
        [10, 6, 5, 0, 12, 9, 3, 15, 1, 4, 11, 2, 14, 7, 8, 13],
        [12, 0, 5, 3, 14, 2, 7, 15, 1, 9, 6, 8, 10, 4, 11, 13],
        [8, 14, 0, 6, 12, 5, 4, 1, 9, 7, 2, 3, 10, 13, 11, 15]
    ],
    [
        [5, 4, 12, 14, 8, 6, 0, 11, 1, 10, 2, 15, 9, 13, 7, 3],
        [13, 12, 3, 14, 1, 0, 4, 15, 6, 7, 5, 10, 2, 11, 9, 8],
        [1, 5, 4, 9, 0, 3, 2, 14, 6, 11, 8, 15, 10, 13, 7, 12],
        [8, 13, 1, 9, 5, 2, 10, 4, 0, 6, 7, 15, 3, 11, 12, 14],
        [14, 4, 0, 3, 2, 10, 9, 8, 13, 15, 11, 7, 12, 1, 5, 6],
        [14, 15, 11, 2, 4, 7, 13, 1, 8, 5, 12, 0, 6, 9, 3, 10],
        [8, 1, 10, 7, 15, 14, 3, 5, 2, 11, 9, 0, 4, 13, 12, 6],
        [4, 7, 14, 6, 12, 10, 11, 3, 2, 9, 5, 13, 15, 1, 8, 0],
        [2, 1, 11, 0, 3, 9, 15, 10, 5, 8, 12, 7, 14, 4, 6, 13],
        [2, 5, 3, 12, 7, 4, 0, 15, 6, 9, 13, 10, 11, 1, 8, 14],
        [13, 3, 1, 4, 8, 9, 12, 0, 14, 5, 7, 2, 10, 6, 11, 15],
        [8, 5, 0, 4, 6, 14, 9, 7, 3, 12, 10, 13, 15, 2, 1, 11],
        [6, 10, 9, 13, 11, 4, 7, 8, 12, 15, 0, 3, 1, 5, 14, 2],
        [12, 8, 9, 14, 13, 7, 5, 10, 3, 0, 2, 15, 6, 4, 1, 11],
        [15, 7, 14, 10, 1, 3, 11, 12, 9, 13, 6, 5, 4, 2, 0, 8],
        [10, 2, 14, 4, 13, 15, 11, 9, 7, 8, 5, 1, 0, 6, 12, 3]
    ],
    [
        [4, 0, 13, 3, 7, 15, 14, 8, 11, 9, 6, 10, 12, 5, 2, 1],
        [4, 10, 9, 2, 15, 11, 12, 8, 0, 6, 7, 14, 1, 5, 13, 3],
        [9, 6, 1, 12, 11, 0, 3, 15, 4, 10, 14, 2, 7, 8, 13, 5],
        [13, 6, 4, 8, 9, 1, 15, 3, 5, 0, 2, 12, 10, 14, 11, 7],
        [13, 6, 10, 9, 1, 12, 11, 14, 3, 4, 0, 8, 15, 2, 5, 7],
        [6, 3, 7, 15, 1, 14, 9, 0, 2, 10, 13, 8, 12, 5, 11, 4],
        [5, 15, 1, 13, 11, 7, 9, 14, 6, 8, 3, 10, 0, 2, 4, 12],
        [13, 8, 4, 6, 1, 2, 15, 3, 5, 12, 0, 14, 11, 7, 9, 10],
        [3, 10, 13, 2, 14, 6, 11, 12, 8, 9, 1, 4, 15, 5, 0, 7],
        [0, 7, 6, 11, 13, 15, 1, 8, 4, 14, 9, 2, 12, 3, 10, 5],
        [9, 6, 5, 12, 13, 1, 10, 14, 3, 15, 2, 7, 11, 0, 4, 8],
        [1, 15, 10, 12, 5, 9, 6, 4, 2, 14, 7, 0, 8, 13, 11, 3],
        [13, 8, 9, 5, 0, 2, 3, 6, 10, 11, 4, 14, 15, 1, 7, 12],
        [10, 6, 13, 4, 2, 14, 11, 12, 5, 0, 1, 15, 7, 9, 3, 8],
        [6, 8, 1, 3, 2, 14, 15, 13, 9, 7, 12, 11, 4, 10, 0, 5],
        [0, 8, 4, 7, 14, 3, 1, 6, 11, 13, 5, 2, 15, 9, 10, 12]
    ],
    [
        [11, 14, 5, 0, 9, 3, 6, 10, 4, 1, 8, 15, 7, 2, 12, 13],
        [14, 12, 3, 7, 8, 4, 2, 13, 9, 15, 11, 10, 1, 5, 6, 0],
        [12, 6, 13, 2, 1, 14, 0, 7, 3, 15, 8, 9, 10, 11, 4, 5],
        [5, 1, 2, 7, 10, 11, 4, 13, 3, 6, 14, 0, 8, 12, 15, 9],
        [5, 9, 2, 15, 1, 6, 3, 14, 11, 4, 13, 7, 8, 10, 0, 12],
        [13, 10, 1, 2, 3, 6, 4, 12, 5, 0, 14, 9, 7, 8, 15, 11],
        [8, 1, 14, 13, 12, 4, 5, 9, 6, 10, 3, 7, 11, 2, 15, 0],
        [10, 6, 13, 3, 0, 4, 2, 5, 8, 1, 12, 14, 9, 15, 11, 7],
        [14, 5, 4, 11, 9, 7, 10, 1, 6, 12, 0, 3, 2, 13, 15, 8],
        [8, 14, 15, 13, 1, 6, 10, 4, 9, 12, 2, 0, 5, 7, 11, 3],
        [15, 8, 0, 9, 5, 1, 6, 13, 12, 10, 11, 3, 4, 14, 2, 7],
        [11, 9, 7, 10, 2, 0, 3, 1, 4, 15, 8, 5, 12, 6, 14, 13],
        [9, 4, 13, 1, 2, 0, 12, 5, 15, 7, 8, 3, 10, 6, 11, 14],
        [11, 14, 3, 5, 4, 0, 9, 7, 15, 8, 1, 13, 2, 6, 12, 10],
        [9, 15, 0, 1, 12, 3, 4, 14, 2, 13, 8, 10, 7, 11, 5, 6],
        [12, 13, 15, 11, 5, 3, 2, 6, 10, 14, 4, 0, 1, 8, 7, 9]
    ],
    [
        [0, 9, 1, 14, 3, 11, 12, 6, 4, 2, 7, 13, 5, 10, 8, 15],
        [13, 6, 1, 14, 3, 2, 0, 4, 10, 7, 9, 12, 11, 8, 15, 5],
        [14, 10, 1, 13, 12, 9, 5, 2, 6, 15, 7, 3, 8, 4, 0, 11],
        [7, 13, 5, 6, 8, 1, 0, 9, 11, 12, 10, 2, 14, 4, 3, 15],
        [1, 5, 15, 13, 14, 7, 2, 12, 9, 6, 10, 0, 11, 3, 4, 8],
        [7, 5, 1, 8, 15, 3, 6, 2, 12, 4, 13, 0, 14, 9, 10, 11],
        [11, 6, 8, 5, 0, 12, 2, 9, 14, 10, 15, 3, 7, 4, 13, 1],
        [15, 3, 5, 10, 6, 8, 7, 9, 1, 0, 14, 4, 12, 2, 11, 13],
        [6, 15, 8, 3, 11, 4, 14, 10, 2, 7, 13, 9, 1, 12, 5, 0],
        [15, 9, 1, 10, 12, 8, 2, 5, 4, 6, 11, 0, 13, 3, 14, 7],
        [3, 14, 4, 1, 6, 12, 11, 0, 7, 9, 10, 2, 15, 8, 13, 5],
        [2, 5, 0, 8, 6, 1, 7, 12, 14, 3, 4, 13, 15, 9, 11, 10],
        [1, 5, 0, 7, 12, 8, 4, 15, 13, 11, 3, 10, 14, 2, 9, 6],
        [15, 3, 0, 1, 5, 14, 11, 6, 8, 12, 13, 2, 10, 4, 7, 9],
        [5, 14, 7, 6, 15, 8, 0, 10, 2, 13, 12, 1, 4, 11, 3, 9],
        [8, 6, 2, 11, 13, 3, 1, 9, 15, 5, 7, 0, 12, 10, 4, 14],
    ],
    [
        [6, 14, 3, 1, 7, 2, 10, 0, 4, 11, 8, 13, 15, 5, 12, 9],
        [15, 2, 7, 9, 5, 11, 6, 0, 1, 3, 10, 4, 13, 8, 14, 12],
        [2, 0, 15, 4, 3, 11, 12, 1, 14, 7, 5, 8, 6, 9, 10, 13],
        [9, 10, 6, 0, 12, 7, 2, 11, 15, 3, 1, 8, 4, 14, 13, 5],
        [15, 4, 13, 1, 14, 3, 12, 7, 0, 8, 11, 2, 9, 5, 10, 6],
        [5, 10, 14, 11, 3, 4, 0, 8, 9, 15, 6, 13, 12, 2, 7, 1],
        [8, 9, 1, 10, 11, 7, 13, 6, 5, 12, 3, 0, 4, 2, 15, 14],
        [5, 3, 11, 15, 14, 13, 0, 1, 9, 4, 12, 7, 10, 6, 2, 8],
        [0, 15, 9, 6, 14, 10, 5, 2, 12, 11, 3, 1, 13, 8, 7, 4],
        [6, 5, 11, 4, 8, 13, 1, 12, 15, 9, 3, 7, 14, 0, 2, 10],
        [5, 2, 8, 14, 11, 6, 3, 13, 15, 12, 9, 10, 7, 4, 0, 1],
        [3, 7, 1, 0, 8, 6, 4, 10, 14, 12, 9, 2, 5, 15, 13, 11],
        [15, 4, 12, 5, 13, 11, 9, 1, 14, 2, 0, 8, 10, 7, 3, 6],
        [12, 3, 5, 1, 9, 10, 11, 15, 7, 8, 13, 0, 6, 14, 4, 2],
        [0, 11, 6, 10, 13, 12, 7, 8, 2, 15, 9, 14, 5, 3, 1, 4],
        [9, 7, 14, 4, 3, 15, 6, 8, 5, 13, 11, 10, 2, 0, 1, 12],
    ],
    [
        [5, 1, 7, 3, 8, 11, 13, 0, 6, 15, 2, 14, 4, 9, 12, 10],
        [15, 12, 3, 8, 11, 14, 7, 13, 4, 9, 2, 10, 1, 6, 0, 5],
        [2, 14, 6, 4, 10, 3, 12, 15, 5, 0, 8, 11, 9, 1, 7, 13],
        [12, 13, 14, 1, 4, 3, 8, 0, 11, 6, 15, 2, 7, 5, 10, 9],
        [8, 7, 6, 2, 4, 11, 13, 5, 0, 1, 14, 10, 15, 12, 3, 9],
        [5, 8, 14, 15, 7, 2, 1, 13, 4, 6, 3, 10, 9, 12, 0, 11],
        [6, 4, 1, 10, 0, 3, 12, 8, 15, 2, 14, 5, 7, 9, 11, 13],
        [7, 6, 8, 14, 1, 13, 5, 12, 9, 0, 4, 11, 2, 10, 15, 3],
        [9, 5, 10, 14, 15, 3, 11, 4, 6, 12, 7, 8, 0, 2, 1, 13],
        [7, 5, 11, 3, 4, 9, 10, 1, 8, 0, 14, 13, 6, 12, 15, 2],
        [14, 6, 3, 4, 0, 2, 8, 7, 10, 12, 9, 5, 15, 1, 13, 11],
        [15, 6, 8, 10, 7, 12, 2, 13, 14, 3, 5, 1, 11, 9, 0, 4],
        [13, 10, 9, 0, 7, 2, 12, 4, 15, 11, 14, 5, 3, 1, 6, 8],
        [12, 4, 14, 2, 5, 11, 7, 8, 9, 6, 15, 0, 3, 13, 10, 1],
        [0, 11, 10, 13, 1, 6, 2, 4, 8, 14, 7, 9, 5, 15, 3, 12],
        [5, 10, 7, 2, 9, 8, 12, 0, 6, 1, 4, 13, 15, 3, 14, 11],
    ],
    [
        [14, 11, 3, 2, 15, 8, 9, 12, 0, 10, 7, 4, 6, 1, 13, 5],
        [3, 8, 7, 10, 1, 12, 13, 2, 9, 6, 5, 15, 11, 4, 0, 14],
        [15, 9, 14, 13, 5, 2, 0, 10, 7, 4, 11, 8, 3, 6, 12, 1],
        [15, 3, 0, 10, 7, 8, 5, 11, 9, 14, 13, 2, 1, 4, 12, 6],
        [11, 7, 3, 4, 10, 12, 6, 2, 0, 1, 8, 14, 5, 9, 13, 15],
        [4, 12, 6, 7, 13, 0, 2, 9, 8, 15, 5, 14, 11, 3, 10, 1],
        [15, 5, 9, 7, 12, 13, 4, 8, 14, 11, 2, 10, 6, 0, 1, 3],
        [4, 6, 3, 14, 15, 0, 10, 8, 5, 12, 1, 13, 2, 7, 9, 11],
        [12, 4, 7, 11, 2, 3, 9, 10, 0, 15, 5, 14, 6, 13, 1, 8],
        [1, 7, 15, 4, 3, 14, 13, 0, 5, 6, 11, 12, 8, 9, 2, 10],
        [6, 0, 9, 12, 8, 14, 15, 3, 10, 13, 4, 7, 11, 2, 5, 1],
        [7, 3, 6, 12, 15, 13, 2, 11, 10, 8, 0, 4, 14, 1, 5, 9],
        [1, 2, 0, 14, 15, 6, 5, 13, 12, 10, 9, 3, 8, 11, 4, 7],
        [11, 12, 5, 2, 14, 3, 0, 7, 1, 9, 15, 13, 8, 4, 10, 6],
        [9, 8, 15, 1, 2, 10, 6, 11, 7, 12, 14, 3, 5, 0, 13, 4],
        [4, 11, 7, 12, 15, 0, 3, 13, 1, 14, 8, 6, 9, 2, 10, 5],
    ],
    [
        [5, 7, 12, 11, 13, 8, 14, 2, 4, 15, 9, 1, 6, 3, 0, 10],
        [10, 15, 5, 12, 13, 8, 1, 3, 0, 4, 9, 6, 7, 14, 2, 11],
        [7, 12, 1, 14, 5, 13, 2, 10, 3, 8, 0, 4, 15, 6, 9, 11],
        [12, 6, 9, 14, 11, 15, 2, 1, 4, 8, 3, 0, 5, 7, 10, 13],
        [13, 4, 7, 5, 11, 2, 0, 15, 1, 3, 14, 6, 12, 9, 8, 10],
        [5, 12, 14, 13, 2, 4, 10, 15, 7, 3, 0, 1, 6, 9, 11, 8],
        [15, 2, 1, 8, 6, 14, 4, 13, 10, 9, 7, 5, 3, 11, 12, 0],
        [1, 8, 6, 2, 0, 12, 10, 7, 3, 5, 9, 4, 15, 14, 11, 13],
        [1, 3, 14, 0, 13, 15, 12, 8, 5, 9, 6, 10, 4, 2, 7, 11],
        [2, 8, 4, 14, 5, 0, 15, 1, 7, 3, 11, 9, 13, 10, 12, 6],
        [10, 4, 2, 14, 3, 8, 0, 1, 9, 6, 5, 15, 13, 12, 11, 7],
        [3, 9, 11, 12, 10, 1, 13, 15, 0, 6, 14, 5, 7, 4, 8, 2],
        [15, 0, 11, 1, 10, 3, 2, 6, 14, 5, 7, 12, 13, 8, 4, 9],
        [4, 13, 11, 8, 2, 0, 14, 15, 12, 6, 10, 9, 3, 5, 7, 1],
        [6, 13, 15, 14, 1, 5, 12, 0, 3, 10, 4, 2, 7, 8, 11, 9],
        [13, 4, 0, 5, 15, 8, 12, 2, 9, 10, 7, 6, 11, 3, 14, 1],
    ],
    [
[12, 4, 5, 13, 7, 10, 9, 1, 0, 2, 8, 3, 15, 11, 6, 14],
[7, 13, 14, 2, 8, 3, 6, 0, 12, 1, 4, 10, 11, 9, 15, 5],
[2, 13, 11, 9, 0, 4, 3, 1, 7, 15, 10, 8, 12, 5, 6, 14],
[13, 7, 2, 8, 10, 11, 0, 1, 4, 12, 14, 9, 3, 6, 15, 5],
[0, 7, 9, 2, 10, 14, 4, 8, 15, 13, 11, 1, 6, 12, 5, 3],
[5, 8, 6, 10, 12, 11, 9, 2, 0, 13, 1, 7, 14, 3, 4, 15],
[12, 5, 8, 2, 4, 1, 9, 7, 0, 13, 3, 10, 14, 6, 15, 11],
[11, 12, 13, 10, 3, 14, 6, 0, 9, 4, 5, 2, 8, 15, 1, 7],
[4, 8, 13, 9, 1, 12, 7, 0, 10, 15, 6, 2, 14, 3, 5, 11],
[1, 11, 8, 2, 9, 7, 3, 12, 5, 0, 10, 4, 6, 15, 14, 13],
[12, 8, 10, 13, 15, 1, 14, 9, 7, 11, 0, 4, 2, 6, 5, 3],
[5, 13, 3, 11, 1, 9, 14, 0, 12, 4, 7, 8, 2, 10, 15, 6],
[7, 3, 14, 4, 1, 8, 2, 12, 5, 13, 6, 11, 9, 0, 15, 10],
[10, 4, 9, 3, 15, 1, 0, 14, 13, 2, 8, 6, 7, 11, 5, 12],
[1, 15, 2, 3, 5, 12, 14, 11, 6, 7, 13, 0, 9, 10, 4, 8],
[13, 9, 1, 4, 7, 12, 8, 10, 5, 6, 14, 2, 3, 11, 0, 15],
    ],
    [
[15, 7, 10, 9, 8, 11, 2, 4, 0, 14, 3, 12, 5, 6, 1, 13],
[13, 7, 0, 1, 11, 6, 2, 3, 4, 9, 12, 10, 5, 15, 8, 14],
[2, 4, 1, 3, 0, 5, 14, 11, 10, 8, 13, 7, 12, 9, 15, 6],
[4, 11, 14, 10, 0, 12, 6, 1, 13, 8, 9, 3, 5, 7, 15, 2],
[11, 5, 8, 2, 3, 14, 15, 12, 10, 0, 6, 1, 4, 9, 13, 7],
[7, 11, 12, 4, 8, 5, 14, 13, 1, 15, 10, 2, 3, 9, 6, 0],
[2, 13, 7, 5, 6, 0, 8, 15, 11, 4, 1, 12, 14, 3, 10, 9],
[14, 1, 4, 0, 12, 7, 15, 5, 3, 9, 11, 8, 13, 6, 10, 2],
[15, 13, 9, 1, 11, 0, 5, 6, 3, 14, 7, 8, 12, 4, 10, 2],
[4, 0, 8, 9, 1, 10, 11, 2, 14, 6, 12, 7, 5, 3, 15, 13],
[4, 10, 1, 3, 14, 11, 12, 13, 6, 8, 7, 0, 15, 2, 9, 5],
[3, 4, 6, 0, 5, 2, 9, 14, 7, 15, 13, 10, 12, 1, 8, 11],
[11, 2, 10, 0, 13, 4, 3, 1, 8, 15, 5, 7, 12, 14, 9, 6],
[1, 5, 2, 4, 0, 15, 10, 11, 13, 12, 7, 9, 6, 3, 8, 14],
[14, 6, 13, 5, 15, 1, 11, 12, 7, 8, 10, 9, 0, 3, 4, 2],
[8, 1, 15, 11, 6, 2, 9, 0, 4, 5, 10, 14, 13, 3, 12, 7],
    ],
    [
[8, 5, 9, 15, 13, 10, 4, 0, 6, 1, 14, 11, 2, 12, 7, 3],
[2, 14, 3, 4, 12, 1, 10, 15, 9, 5, 11, 7, 13, 6, 0, 8],
[6, 14, 3, 2, 4, 13, 15, 7, 10, 8, 12, 9, 0, 11, 5, 1],
[6, 12, 0, 4, 11, 8, 10, 14, 7, 3, 15, 2, 1, 9, 13, 5],
[13, 7, 1, 2, 9, 5, 8, 15, 4, 14, 0, 3, 6, 12, 10, 11],
[14, 10, 15, 12, 8, 1, 5, 6, 13, 11, 7, 0, 2, 4, 9, 3],
[9, 2, 13, 10, 15, 14, 12, 3, 1, 5, 0, 6, 8, 7, 4, 11],
[11, 1, 13, 9, 14, 2, 0, 4, 15, 8, 10, 6, 3, 12, 5, 7],
[5, 3, 15, 0, 13, 2, 11, 14, 1, 10, 4, 6, 9, 8, 12, 7],
[14, 13, 8, 15, 3, 1, 9, 4, 11, 5, 7, 10, 12, 2, 0, 6],
[12, 2, 10, 6, 3, 1, 0, 15, 13, 8, 7, 9, 5, 14, 11, 4],
[4, 3, 12, 11, 7, 6, 8, 13, 5, 10, 1, 15, 14, 0, 2, 9],
[11, 12, 0, 9, 13, 10, 3, 6, 14, 15, 5, 7, 4, 1, 8, 2],
[7, 9, 14, 0, 3, 10, 8, 15, 1, 2, 13, 6, 5, 11, 4, 12],
[4, 7, 3, 14, 9, 12, 0, 11, 15, 10, 1, 6, 2, 8, 5, 13],
[5, 10, 11, 3, 13, 14, 7, 15, 6, 2, 8, 4, 12, 1, 0, 9],
    ],
    [
[1, 11, 4, 7, 5, 6, 8, 12, 2, 9, 14, 0, 13, 15, 10, 3],
[11, 6, 3, 10, 7, 12, 0, 14, 13, 2, 9, 8, 4, 15, 1, 5],
[10, 2, 9, 12, 7, 6, 15, 5, 14, 3, 11, 13, 1, 0, 4, 8],
[11, 9, 7, 0, 14, 10, 15, 8, 1, 3, 6, 5, 2, 12, 4, 13],
[12, 8, 4, 14, 15, 11, 10, 13, 0, 2, 6, 9, 5, 3, 7, 1],
[9, 1, 3, 12, 8, 0, 4, 7, 10, 13, 14, 6, 5, 2, 11, 15],
[6, 14, 4, 9, 15, 12, 8, 11, 2, 13, 7, 5, 0, 10, 1, 3],
[6, 13, 5, 11, 0, 8, 12, 9, 10, 4, 15, 7, 2, 1, 14, 3],
[14, 15, 12, 8, 3, 1, 2, 7, 9, 10, 5, 11, 4, 0, 13, 6],
[1, 10, 11, 14, 5, 9, 4, 3, 6, 15, 12, 8, 0, 13, 7, 2],
[13, 6, 15, 10, 14, 12, 7, 11, 9, 8, 0, 3, 4, 1, 2, 5],
[6, 13, 1, 0, 14, 8, 15, 3, 5, 11, 4, 10, 7, 9, 2, 12],
[12, 14, 1, 4, 9, 7, 13, 8, 2, 3, 15, 10, 11, 6, 0, 5],
[1, 0, 3, 8, 12, 11, 4, 15, 9, 6, 5, 7, 2, 13, 10, 14],
[4, 8, 9, 0, 12, 3, 5, 1, 13, 11, 7, 15, 6, 10, 2, 14],
[5, 12, 14, 1, 6, 7, 8, 13, 9, 0, 11, 3, 2, 4, 15, 10],
    ],
    [
[8, 14, 4, 12, 0, 1, 15, 10, 7, 9, 2, 6, 11, 13, 5, 3],
[0, 4, 3, 14, 8, 6, 11, 1, 10, 2, 12, 9, 13, 5, 7, 15],
[2, 4, 11, 7, 12, 9, 5, 14, 6, 1, 8, 0, 15, 3, 10, 13],
[14, 6, 5, 3, 0, 7, 12, 15, 13, 8, 1, 9, 10, 2, 11, 4],
[2, 11, 5, 6, 7, 12, 13, 0, 8, 3, 1, 15, 10, 9, 14, 4],
[0, 3, 9, 5, 10, 11, 1, 14, 8, 15, 12, 7, 13, 4, 6, 2],
[7, 11, 0, 8, 5, 6, 15, 4, 2, 13, 1, 14, 12, 9, 3, 10],
[12, 11, 6, 2, 15, 3, 1, 9, 14, 7, 5, 4, 10, 13, 8, 0],
[8, 7, 0, 6, 3, 12, 15, 1, 5, 14, 11, 13, 4, 10, 2, 9],
[2, 0, 5, 11, 15, 9, 10, 13, 14, 8, 1, 3, 4, 7, 6, 12],
[6, 2, 3, 4, 7, 9, 13, 10, 11, 12, 5, 14, 1, 0, 8, 15],
[11, 13, 7, 10, 15, 0, 14, 5, 2, 1, 8, 3, 4, 12, 6, 9],
[12, 2, 9, 14, 11, 10, 7, 5, 8, 3, 0, 6, 13, 15, 4, 1],
[3, 5, 14, 8, 1, 0, 11, 12, 2, 10, 13, 6, 7, 15, 9, 4],
[9, 0, 1, 7, 10, 2, 11, 15, 6, 8, 3, 14, 5, 13, 12, 4],
[7, 6, 5, 14, 15, 13, 8, 11, 1, 3, 2, 9, 4, 12, 0, 10],
    ],
    [
[7, 15, 13, 6, 12, 0, 4, 10, 11, 1, 3, 2, 9, 14, 8, 5],
[4, 15, 8, 5, 14, 12, 11, 6, 1, 0, 7, 13, 9, 10, 3, 2],
[4, 3, 12, 13, 1, 7, 10, 8, 6, 9, 2, 5, 11, 14, 0, 15],
[4, 12, 1, 15, 5, 7, 11, 2, 0, 10, 3, 13, 8, 9, 6, 14],
[5, 11, 14, 0, 10, 7, 3, 9, 12, 4, 15, 2, 6, 1, 13, 8],
[12, 1, 15, 7, 13, 10, 8, 4, 6, 3, 14, 9, 5, 2, 0, 11],
[0, 14, 9, 12, 3, 6, 4, 11, 10, 1, 2, 15, 8, 5, 13, 7],
[2, 14, 6, 10, 9, 1, 13, 8, 12, 11, 4, 15, 3, 5, 7, 0],
[8, 5, 2, 7, 9, 4, 13, 10, 0, 3, 6, 15, 11, 1, 12, 14],
[3, 0, 10, 7, 4, 1, 11, 9, 5, 15, 12, 13, 6, 8, 2, 14],
[7, 8, 5, 12, 15, 14, 0, 4, 6, 2, 3, 1, 11, 10, 13, 9],
[3, 0, 13, 11, 7, 4, 15, 10, 12, 5, 8, 6, 14, 9, 1, 2],
[3, 11, 6, 0, 15, 5, 9, 7, 14, 1, 4, 13, 8, 10, 12, 2],
[8, 15, 1, 10, 9, 0, 12, 7, 14, 13, 6, 4, 2, 5, 3, 11],
[2, 10, 5, 15, 12, 4, 1, 14, 3, 8, 9, 6, 13, 0, 7, 11],
[10, 12, 4, 5, 9, 3, 14, 11, 15, 0, 7, 8, 2, 1, 6, 13],
    ],
    [
[10, 9, 11, 6, 5, 15, 7, 8, 4, 3, 12, 14, 13, 0, 1, 2],
[9, 10, 3, 7, 0, 12, 15, 6, 5, 13, 4, 14, 11, 1, 8, 2],
[5, 4, 12, 15, 13, 2, 9, 1, 3, 0, 11, 10, 6, 8, 14, 7],
[15, 10, 4, 9, 1, 2, 14, 11, 7, 6, 13, 8, 0, 3, 5, 12],
[0, 11, 8, 3, 6, 7, 9, 12, 13, 1, 10, 14, 2, 15, 5, 4],
[14, 10, 8, 15, 5, 3, 7, 2, 12, 1, 0, 9, 4, 13, 6, 11],
[14, 11, 15, 8, 9, 10, 1, 12, 6, 5, 0, 2, 3, 7, 13, 4],
[6, 10, 4, 3, 8, 9, 5, 15, 7, 1, 13, 0, 14, 2, 12, 11],
[5, 7, 4, 3, 1, 15, 12, 10, 8, 0, 14, 6, 2, 9, 13, 11],
[7, 14, 3, 11, 12, 10, 4, 8, 5, 1, 15, 2, 9, 13, 6, 0],
[13, 4, 7, 3, 5, 10, 12, 14, 0, 11, 6, 1, 8, 15, 9, 2],
[9, 1, 6, 15, 4, 12, 0, 8, 14, 13, 7, 10, 2, 11, 3, 5],
[15, 6, 4, 14, 0, 8, 11, 2, 5, 12, 3, 1, 13, 7, 10, 9],
[15, 10, 11, 9, 6, 12, 5, 14, 13, 4, 7, 2, 0, 3, 8, 1],
[14, 9, 2, 12, 10, 4, 6, 7, 0, 5, 13, 15, 1, 8, 11, 3],
[6, 1, 9, 2, 15, 11, 5, 14, 0, 10, 8, 4, 7, 3, 12, 13],
    ]
]


def split32bits_in_8bits(XOR_32bits):
    list_of_6bits = textwrap.wrap(XOR_32bits, 8)
    return list_of_6bits


def binary_to_decimal(binarybits):
    decimal = int(binarybits, 2)
    return decimal


def decimal_to_binary(decimal):
    binary4bits = bin(decimal)[2:].zfill(4)
    return binary4bits


def sbox_lookup(sboxcount, block):
    value = binary_to_decimal(block)
    sbox_value_1 = SBOX[sboxcount][value // 16][value % 16] + 1
    sbox_value_2 = SBOX[-(sboxcount + 1)][value % 16][value // 16] + 1
    new_block = decimal_to_binary(sbox_value_1) + decimal_to_binary(sbox_value_2)
    new_block = permutate(SBOX_PERMUTATION_TABLE, new_block)
    return new_block


SBOX_PERMUTATION_TABLE = [5, 1, 7, 2, 6, 3, 8, 4]


def functionF(pre128bits, key128bits):
    final128bits = ''
    _128bits = permutate(PERMUTATION_TABLE_1, pre128bits)

    for block, sbox_count in zip(split32bits_in_8bits(_128bits), range(16)):
        final128bits += sbox_lookup(sbox_count, block)

    final128bits = XOR(final128bits, key128bits)

    return permutate(PERMUTATION_TABLE_2, final128bits)


PERMUTATION_TABLE_1 = [110, 6, 4, 25, 23, 102, 2, 35, 54, 17, 40, 47, 86, 52, 105, 15, 24, 71, 121, 32, 69, 79, 124, 37, 62, 5, 11, 13, 30, 101, 28, 14, 9, 33, 50, 116, 82, 118, 31, 66, 107, 26, 19, 74, 100, 122, 89, 60, 43, 7, 85, 80, 88, 68, 111, 120, 56, 119, 108, 58, 87, 57, 109, 27, 96, 103, 104, 36, 73, 78, 12, 93, 41, 64, 106, 83, 34, 99, 112, 42, 65, 115, 72, 70, 39, 76, 125, 81, 16, 114, 55, 46, 84, 98, 21, 63, 59, 94, 61, 53, 75, 1, 10, 51, 8, 91, 77, 18, 92, 90, 22, 67, 113, 38, 3, 20, 128, 123, 117, 127, 49, 44, 95, 48, 126, 97, 29, 45]


PERMUTATION_TABLE_2 = [127, 53, 33, 91, 14, 97, 80, 52, 26, 36, 78, 37, 124, 46, 60, 34, 50, 48, 71, 108, 122, 104, 86, 62, 20, 39, 63, 47, 125, 31, 95, 16, 17, 81, 30, 94, 117, 5, 114, 3, 1, 42, 19, 96, 35, 51, 123, 119, 118, 103, 45, 54, 4, 74, 79, 10, 87, 120, 75, 93, 106, 61, 92, 70, 64, 83, 44, 59, 55, 101, 76, 128, 32, 56, 110, 24, 72, 22, 27, 89, 23, 115, 98, 67, 85, 7, 82, 111, 9, 77, 12, 90, 69, 107, 13, 99, 28, 121, 21, 38, 8, 57, 102, 40, 109, 100, 49, 66, 43, 113, 84, 6, 58, 25, 29, 105, 18, 73, 126, 41, 65, 88, 68, 2, 112, 11, 116, 15]


def XOR(bits1, bits2):
    xor_result = ""
    for index in range(len(bits1)):
        if bits1[index] == bits2[index]:
            xor_result += '0'
        else:
            xor_result += '1'
    return xor_result


# endregion F_Func
""" W szyfrowaniu i deszyfrowaniu korzystam z sieci Feistela """
""" Długość kluczy i bloku jest 256 bitów """


def Encrypt(message, key):
    cipher = ""
    keys = generate_keys(key)
    for i in range(len(message) // 256):
        block = message[256 * i:256 * (i + 1)]
        for k in range(16):
            l, r = block[:128], block[128:]
            l, r = r, XOR(l, functionF(r, keys[k]))
            block = l + r
        cipher += block
    return cipher


def Decrypt(message, key):
    cipher = ""
    keys = generate_keys(key)
    for i in range(len(message) // 256):
        block = message[256 * i: 256 * (i + 1)]
        for k in range(16):
            l, r = block[:128], block[128:]
            l, r = XOR(r, functionF(l, keys[-(k + 1)])), l
            block = l + r
        cipher += block
    return cipher


# region Text

get_bin = lambda x, n: format(x, 'b').zfill(n)


def intoIntArray(message: str):
    int_array = []
    mesg_array = list(message)
    for i in mesg_array:
        int_array.append(ord(i))
    return int_array


def intoCharArray(message: []):
    mesg_char = []
    for i in message:
        mesg_char.append(chr(i))
    return mesg_char


def intListToBinStr(message_list):
    binary = []
    for x in message_list:
        binary.append(get_bin(x, 8))
    binary_str = ""
    for x in binary:
        binary_str += x
    return binary_str


# endregion Text


# region Testing

M = "HelloMyDearWorldIloveyouSoMuch!!"
key = "IFMaBGoEiIKLx44CpFoHbMoBhqXPRYio"

plaintext = intListToBinStr(intoIntArray(M))
print("Plaintext:", plaintext)
binary_key = intListToBinStr(intoIntArray(key))
print("Key: ", binary_key)

ciphertext = Encrypt(plaintext, binary_key[:256])
print("Ciphertext:         ", ciphertext)
encrypted = Decrypt(ciphertext, binary_key[:256])
print("Encrypted message:  ", encrypted)

print(XOR(plaintext, encrypted))

# endregion Testing
